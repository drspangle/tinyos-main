/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'fingerIIRequestMsg'
 * message type.
 */

public class fingerIIRequestMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 24;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = -1;

    /** Create a new fingerIIRequestMsg of size 24. */
    public fingerIIRequestMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new fingerIIRequestMsg of the given data_length. */
    public fingerIIRequestMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg with the given data_length
     * and base offset.
     */
    public fingerIIRequestMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg using the given byte array
     * as backing store.
     */
    public fingerIIRequestMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public fingerIIRequestMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public fingerIIRequestMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg embedded in the given message
     * at the given base offset.
     */
    public fingerIIRequestMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new fingerIIRequestMsg embedded in the given message
     * at the given base offset and length.
     */
    public fingerIIRequestMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <fingerIIRequestMsg> \n";
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [target=0x"+Long.toHexString(get_target())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [request=0x"+Long.toHexString(get_request())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seq=0x"+Long.toHexString(get_seq())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.policyId=0x"+Long.toHexString(get_context_policyId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.policyId=0x"+Long.toHexString(get_context_oblPolicy_policyId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.predicateId=0x"+Long.toHexString(get_context_oblPolicy_predicateId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.eventId=0x"+Long.toHexString(get_context_oblPolicy_eventId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.actionId=0x"+Long.toHexString(get_context_oblPolicy_actionId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.preArgDesc=0x"+Long.toHexString(get_context_oblPolicy_preArgDesc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.actArgDesc=0x"+Long.toHexString(get_context_oblPolicy_actArgDesc())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.predicateArgs=";
        for (int i = 0; i < 3; i++) {
          s += "0x"+Long.toHexString(getElement_context_oblPolicy_predicateArgs(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.oblPolicy.actionArgs=";
        for (int i = 0; i < 4; i++) {
          s += "0x"+Long.toHexString(getElement_context_oblPolicy_actionArgs(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.evt.eventId=0x"+Long.toHexString(get_context_evt_eventId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [context.evt.args=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_context_evt_args(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: short
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'source'
     */
    public short get_source() {
        return (short)getUIntElement(offsetBits_source(), 8);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(short value) {
        setUIntElement(offsetBits_source(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: target
    //   Field type: short
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'target' is signed (false).
     */
    public static boolean isSigned_target() {
        return false;
    }

    /**
     * Return whether the field 'target' is an array (false).
     */
    public static boolean isArray_target() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'target'
     */
    public static int offset_target() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'target'
     */
    public static int offsetBits_target() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'target'
     */
    public short get_target() {
        return (short)getUIntElement(offsetBits_target(), 8);
    }

    /**
     * Set the value of the field 'target'
     */
    public void set_target(short value) {
        setUIntElement(offsetBits_target(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'target'
     */
    public static int size_target() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'target'
     */
    public static int sizeBits_target() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: request
    //   Field type: short
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'request' is signed (false).
     */
    public static boolean isSigned_request() {
        return false;
    }

    /**
     * Return whether the field 'request' is an array (false).
     */
    public static boolean isArray_request() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'request'
     */
    public static int offset_request() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'request'
     */
    public static int offsetBits_request() {
        return 16;
    }

    /**
     * Return the value (as a short) of the field 'request'
     */
    public short get_request() {
        return (short)getUIntElement(offsetBits_request(), 8);
    }

    /**
     * Set the value of the field 'request'
     */
    public void set_request(short value) {
        setUIntElement(offsetBits_request(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'request'
     */
    public static int size_request() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'request'
     */
    public static int sizeBits_request() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq
    //   Field type: short
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq' is signed (false).
     */
    public static boolean isSigned_seq() {
        return false;
    }

    /**
     * Return whether the field 'seq' is an array (false).
     */
    public static boolean isArray_seq() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq'
     */
    public static int offset_seq() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq'
     */
    public static int offsetBits_seq() {
        return 24;
    }

    /**
     * Return the value (as a short) of the field 'seq'
     */
    public short get_seq() {
        return (short)getUIntElement(offsetBits_seq(), 8);
    }

    /**
     * Set the value of the field 'seq'
     */
    public void set_seq(short value) {
        setUIntElement(offsetBits_seq(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq'
     */
    public static int size_seq() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq'
     */
    public static int sizeBits_seq() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.policyId
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.policyId' is signed (false).
     */
    public static boolean isSigned_context_policyId() {
        return false;
    }

    /**
     * Return whether the field 'context.policyId' is an array (false).
     */
    public static boolean isArray_context_policyId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.policyId'
     */
    public static int offset_context_policyId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.policyId'
     */
    public static int offsetBits_context_policyId() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'context.policyId'
     */
    public short get_context_policyId() {
        return (short)getUIntElement(offsetBits_context_policyId(), 8);
    }

    /**
     * Set the value of the field 'context.policyId'
     */
    public void set_context_policyId(short value) {
        setUIntElement(offsetBits_context_policyId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.policyId'
     */
    public static int size_context_policyId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.policyId'
     */
    public static int sizeBits_context_policyId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.policyId
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.policyId' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_policyId() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.policyId' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_policyId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.policyId'
     */
    public static int offset_context_oblPolicy_policyId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.policyId'
     */
    public static int offsetBits_context_oblPolicy_policyId() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.policyId'
     */
    public short get_context_oblPolicy_policyId() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_policyId(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.policyId'
     */
    public void set_context_oblPolicy_policyId(short value) {
        setUIntElement(offsetBits_context_oblPolicy_policyId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.policyId'
     */
    public static int size_context_oblPolicy_policyId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.policyId'
     */
    public static int sizeBits_context_oblPolicy_policyId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.predicateId
    //   Field type: short
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.predicateId' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_predicateId() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.predicateId' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_predicateId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.predicateId'
     */
    public static int offset_context_oblPolicy_predicateId() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.predicateId'
     */
    public static int offsetBits_context_oblPolicy_predicateId() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.predicateId'
     */
    public short get_context_oblPolicy_predicateId() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_predicateId(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.predicateId'
     */
    public void set_context_oblPolicy_predicateId(short value) {
        setUIntElement(offsetBits_context_oblPolicy_predicateId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.predicateId'
     */
    public static int size_context_oblPolicy_predicateId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.predicateId'
     */
    public static int sizeBits_context_oblPolicy_predicateId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.eventId
    //   Field type: short
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.eventId' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_eventId() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.eventId' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_eventId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.eventId'
     */
    public static int offset_context_oblPolicy_eventId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.eventId'
     */
    public static int offsetBits_context_oblPolicy_eventId() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.eventId'
     */
    public short get_context_oblPolicy_eventId() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_eventId(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.eventId'
     */
    public void set_context_oblPolicy_eventId(short value) {
        setUIntElement(offsetBits_context_oblPolicy_eventId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.eventId'
     */
    public static int size_context_oblPolicy_eventId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.eventId'
     */
    public static int sizeBits_context_oblPolicy_eventId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.actionId
    //   Field type: short
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.actionId' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_actionId() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.actionId' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_actionId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.actionId'
     */
    public static int offset_context_oblPolicy_actionId() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.actionId'
     */
    public static int offsetBits_context_oblPolicy_actionId() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.actionId'
     */
    public short get_context_oblPolicy_actionId() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_actionId(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.actionId'
     */
    public void set_context_oblPolicy_actionId(short value) {
        setUIntElement(offsetBits_context_oblPolicy_actionId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.actionId'
     */
    public static int size_context_oblPolicy_actionId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.actionId'
     */
    public static int sizeBits_context_oblPolicy_actionId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.preArgDesc
    //   Field type: short
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.preArgDesc' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_preArgDesc() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.preArgDesc' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_preArgDesc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.preArgDesc'
     */
    public static int offset_context_oblPolicy_preArgDesc() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.preArgDesc'
     */
    public static int offsetBits_context_oblPolicy_preArgDesc() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.preArgDesc'
     */
    public short get_context_oblPolicy_preArgDesc() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_preArgDesc(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.preArgDesc'
     */
    public void set_context_oblPolicy_preArgDesc(short value) {
        setUIntElement(offsetBits_context_oblPolicy_preArgDesc(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.preArgDesc'
     */
    public static int size_context_oblPolicy_preArgDesc() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.preArgDesc'
     */
    public static int sizeBits_context_oblPolicy_preArgDesc() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.actArgDesc
    //   Field type: short
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.actArgDesc' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_actArgDesc() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.actArgDesc' is an array (false).
     */
    public static boolean isArray_context_oblPolicy_actArgDesc() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.actArgDesc'
     */
    public static int offset_context_oblPolicy_actArgDesc() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.actArgDesc'
     */
    public static int offsetBits_context_oblPolicy_actArgDesc() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'context.oblPolicy.actArgDesc'
     */
    public short get_context_oblPolicy_actArgDesc() {
        return (short)getUIntElement(offsetBits_context_oblPolicy_actArgDesc(), 8);
    }

    /**
     * Set the value of the field 'context.oblPolicy.actArgDesc'
     */
    public void set_context_oblPolicy_actArgDesc(short value) {
        setUIntElement(offsetBits_context_oblPolicy_actArgDesc(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.oblPolicy.actArgDesc'
     */
    public static int size_context_oblPolicy_actArgDesc() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.oblPolicy.actArgDesc'
     */
    public static int sizeBits_context_oblPolicy_actArgDesc() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.predicateArgs
    //   Field type: int[]
    //   Offset (bits): 80
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.predicateArgs' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_predicateArgs() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.predicateArgs' is an array (true).
     */
    public static boolean isArray_context_oblPolicy_predicateArgs() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.predicateArgs'
     */
    public static int offset_context_oblPolicy_predicateArgs(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.predicateArgs'
     */
    public static int offsetBits_context_oblPolicy_predicateArgs(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 3) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'context.oblPolicy.predicateArgs' as a int[]
     */
    public int[] get_context_oblPolicy_predicateArgs() {
        int[] tmp = new int[3];
        for (int index0 = 0; index0 < numElements_context_oblPolicy_predicateArgs(0); index0++) {
            tmp[index0] = getElement_context_oblPolicy_predicateArgs(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'context.oblPolicy.predicateArgs' from the given int[]
     */
    public void set_context_oblPolicy_predicateArgs(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_context_oblPolicy_predicateArgs(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'context.oblPolicy.predicateArgs'
     */
    public int getElement_context_oblPolicy_predicateArgs(int index1) {
        return (int)getUIntElement(offsetBits_context_oblPolicy_predicateArgs(index1), 16);
    }

    /**
     * Set an element of the array 'context.oblPolicy.predicateArgs'
     */
    public void setElement_context_oblPolicy_predicateArgs(int index1, int value) {
        setUIntElement(offsetBits_context_oblPolicy_predicateArgs(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'context.oblPolicy.predicateArgs'
     */
    public static int totalSize_context_oblPolicy_predicateArgs() {
        return (48 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'context.oblPolicy.predicateArgs'
     */
    public static int totalSizeBits_context_oblPolicy_predicateArgs() {
        return 48;
    }

    /**
     * Return the size, in bytes, of each element of the array 'context.oblPolicy.predicateArgs'
     */
    public static int elementSize_context_oblPolicy_predicateArgs() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'context.oblPolicy.predicateArgs'
     */
    public static int elementSizeBits_context_oblPolicy_predicateArgs() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'context.oblPolicy.predicateArgs'
     */
    public static int numDimensions_context_oblPolicy_predicateArgs() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'context.oblPolicy.predicateArgs'
     */
    public static int numElements_context_oblPolicy_predicateArgs() {
        return 3;
    }

    /**
     * Return the number of elements in the array 'context.oblPolicy.predicateArgs'
     * for the given dimension.
     */
    public static int numElements_context_oblPolicy_predicateArgs(int dimension) {
      int array_dims[] = { 3,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.oblPolicy.actionArgs
    //   Field type: int[]
    //   Offset (bits): 128
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.oblPolicy.actionArgs' is signed (false).
     */
    public static boolean isSigned_context_oblPolicy_actionArgs() {
        return false;
    }

    /**
     * Return whether the field 'context.oblPolicy.actionArgs' is an array (true).
     */
    public static boolean isArray_context_oblPolicy_actionArgs() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'context.oblPolicy.actionArgs'
     */
    public static int offset_context_oblPolicy_actionArgs(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.oblPolicy.actionArgs'
     */
    public static int offsetBits_context_oblPolicy_actionArgs(int index1) {
        int offset = 128;
        if (index1 < 0 || index1 >= 4) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'context.oblPolicy.actionArgs' as a int[]
     */
    public int[] get_context_oblPolicy_actionArgs() {
        int[] tmp = new int[4];
        for (int index0 = 0; index0 < numElements_context_oblPolicy_actionArgs(0); index0++) {
            tmp[index0] = getElement_context_oblPolicy_actionArgs(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'context.oblPolicy.actionArgs' from the given int[]
     */
    public void set_context_oblPolicy_actionArgs(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_context_oblPolicy_actionArgs(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'context.oblPolicy.actionArgs'
     */
    public int getElement_context_oblPolicy_actionArgs(int index1) {
        return (int)getUIntElement(offsetBits_context_oblPolicy_actionArgs(index1), 16);
    }

    /**
     * Set an element of the array 'context.oblPolicy.actionArgs'
     */
    public void setElement_context_oblPolicy_actionArgs(int index1, int value) {
        setUIntElement(offsetBits_context_oblPolicy_actionArgs(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'context.oblPolicy.actionArgs'
     */
    public static int totalSize_context_oblPolicy_actionArgs() {
        return (64 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'context.oblPolicy.actionArgs'
     */
    public static int totalSizeBits_context_oblPolicy_actionArgs() {
        return 64;
    }

    /**
     * Return the size, in bytes, of each element of the array 'context.oblPolicy.actionArgs'
     */
    public static int elementSize_context_oblPolicy_actionArgs() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'context.oblPolicy.actionArgs'
     */
    public static int elementSizeBits_context_oblPolicy_actionArgs() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'context.oblPolicy.actionArgs'
     */
    public static int numDimensions_context_oblPolicy_actionArgs() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'context.oblPolicy.actionArgs'
     */
    public static int numElements_context_oblPolicy_actionArgs() {
        return 4;
    }

    /**
     * Return the number of elements in the array 'context.oblPolicy.actionArgs'
     * for the given dimension.
     */
    public static int numElements_context_oblPolicy_actionArgs(int dimension) {
      int array_dims[] = { 4,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.evt.eventId
    //   Field type: short
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.evt.eventId' is signed (false).
     */
    public static boolean isSigned_context_evt_eventId() {
        return false;
    }

    /**
     * Return whether the field 'context.evt.eventId' is an array (false).
     */
    public static boolean isArray_context_evt_eventId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'context.evt.eventId'
     */
    public static int offset_context_evt_eventId() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.evt.eventId'
     */
    public static int offsetBits_context_evt_eventId() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'context.evt.eventId'
     */
    public short get_context_evt_eventId() {
        return (short)getUIntElement(offsetBits_context_evt_eventId(), 8);
    }

    /**
     * Set the value of the field 'context.evt.eventId'
     */
    public void set_context_evt_eventId(short value) {
        setUIntElement(offsetBits_context_evt_eventId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'context.evt.eventId'
     */
    public static int size_context_evt_eventId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'context.evt.eventId'
     */
    public static int sizeBits_context_evt_eventId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: context.evt.args
    //   Field type: int[]
    //   Offset (bits): 40
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'context.evt.args' is signed (false).
     */
    public static boolean isSigned_context_evt_args() {
        return false;
    }

    /**
     * Return whether the field 'context.evt.args' is an array (true).
     */
    public static boolean isArray_context_evt_args() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'context.evt.args'
     */
    public static int offset_context_evt_args(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'context.evt.args'
     */
    public static int offsetBits_context_evt_args(int index1) {
        int offset = 40;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'context.evt.args' as a int[]
     */
    public int[] get_context_evt_args() {
        int[] tmp = new int[1];
        for (int index0 = 0; index0 < numElements_context_evt_args(0); index0++) {
            tmp[index0] = getElement_context_evt_args(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'context.evt.args' from the given int[]
     */
    public void set_context_evt_args(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_context_evt_args(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'context.evt.args'
     */
    public int getElement_context_evt_args(int index1) {
        return (int)getUIntElement(offsetBits_context_evt_args(index1), 16);
    }

    /**
     * Set an element of the array 'context.evt.args'
     */
    public void setElement_context_evt_args(int index1, int value) {
        setUIntElement(offsetBits_context_evt_args(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'context.evt.args'
     */
    public static int totalSize_context_evt_args() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'context.evt.args'
     */
    public static int totalSizeBits_context_evt_args() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'context.evt.args'
     */
    public static int elementSize_context_evt_args() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'context.evt.args'
     */
    public static int elementSizeBits_context_evt_args() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'context.evt.args'
     */
    public static int numDimensions_context_evt_args() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'context.evt.args'
     */
    public static int numElements_context_evt_args() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'context.evt.args'
     * for the given dimension.
     */
    public static int numElements_context_evt_args(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
